using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static List<int[]> _adjList = new List<int[]>();    // 隣接リスト（添え字がID, 値の配列が隣接する頂点）
    static Stack<int> _stack = new Stack<int>();

    static void Main()
    {
        var data = Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
        int n = data[0], s = data[1], g = data[2];  // n: 頂点数, s: スタート, g: ゴール

        for (int i = 0; i < n; i++)
        {
            data = Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
            _adjList.Add(data);
        }   // 頂点の数だけ隣接データを読み込む

        _stack.Push(s);
        Dfs(g);
    }

    static void Dfs(int goal)
    {
        int currentNode = _stack.Pop();
        _stack.Push(currentNode);
        var nextNodes = _adjList[currentNode];

        foreach (var nextNode in nextNodes)
        {
            if (!_stack.Contains(nextNode))
            {
                _stack.Push(nextNode);

                if (nextNode == goal)
                {
                    Console.WriteLine(string.Join(" ", _stack.Reverse()));
                }//ゴールに到着
                else
                {
                    Dfs(goal);
                }//到着できなかったら、さらに進む

                _stack.Pop();// 後戻りする
            }
        }//次の行先を探す=>条件:[まだ行ったことがない頂点(未訪問)なら]
    }
}
